-- MULTIPLE LINEAR REGRESSION --
wine.dat = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", head=T, sep = ';')  
Quality <- wine.dat[["quality"]]
fixed_acidity <- wine.dat[[1]]
citric_acid <- wine.dat[[3]]
density <- wine.dat[["density"]]
ph <- wine.dat[["pH"]]
alcohol <- wine.dat[["alcohol"]]
sulphates <- wine.dat[["sulphates"]]
model.wine <- lm(Quality ~ fixed_acidity + citric_acid + density + ph + alcohol + sulphates)
summary(model.wine)
model.wine2 <- lm(Quality ~ fixed_acidity + density + alcohol + sulphates)
summary(model.wine2)
anova(model.wine2, model.wine)
confint(model.wine2, level=0.95)
plot(alcohol, residuals(model.wine2), ylab="Residuals")
plot(sulphates, residuals(model.wine2), ylab="Residuals")
plot(density, residuals(model.wine2), ylab="Residuals")
plot(fixed_acidity, residuals(model.wine2), ylab="Residuals")
plot(fitted(model.wine2), residuals(model.wine2), ylab="Residuals", xlab="Fitted values")
qqnorm(residuals(model.wine2))
qqline(residuals(model.wine2))

-- LOGISTIC REGRESSION --
wine.dat = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", head=T, sep = ';')  
Quality <- wine.dat[["quality"]]
Quality_Range <- ifelse(Quality %in% c(6,7,8),1,0)
wine.mod = glm(Quality_Range~alcohol + sulphates, family = binomial, data = wine.dat)
summary(wine.mod)
confint.default(wine.mod)
exp(confint.default(wine.mod))
pihat = wine.mod$fitted.values
devresids = residuals(wine.mod)
resids = residuals(wine.mod, type = "response")
Presids = residuals(wine.mod, type = "pearson")
plot(pihat, Presids, xlab = "Predicted probability", ylab = "Pearson residual")

h = hatvalues(wine.mod)
plot(pihat, h, xlab = "Predicted probability", ylab = "Leverage")
delBeta = Presids^2 * h / ((1-h)^2)
plot(pihat, delBeta, xlab = "Predicted probability", ylab = "Cook's Distance")

install.packages("ResourceSelection")
library(ResourceSelection)
hl = hoslem.test(wine.mod$y, fitted(wine.mod), g=10)
hl


-- PCA --
Nums <- c(1.0,0.82,0.48,-0.22,0.36,0.82,1.0,0.33,-0.04,0.23,0.08,0.33,1.0,0.06,0.02,-0.22,-0.04,0.06,1.0,0.12,0.36,0.23,0.02,0.12,1.0)
A = matrix(Nums,nrow=5,ncol=5)
eigen(A)
